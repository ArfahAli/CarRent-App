{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar seedData = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var carsCollection = collection(db, 'cars');\n      var carsQuerySnapshot = yield getDocs(carsCollection);\n      var deletePromises = carsQuerySnapshot.docs.map(function (doc) {\n        return deleteDoc(doc.ref);\n      });\n      yield Promise.all(deletePromises);\n      var metadataRef = doc(db, 'metadata', 'seedStatus');\n      yield deleteDoc(metadataRef);\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      return false;\n    }\n    var vehiclesCollection = collection(db, 'cars');\n    try {\n      for (var vehicle of vehiclesData) {\n        yield addDoc(vehiclesCollection, vehicle);\n      }\n      var _metadataRef = doc(db, 'metadata', 'seedStatus');\n      yield setDoc(_metadataRef, {\n        seeded: true\n      });\n      console.log('Car data seeded successfully.');\n      return true;\n    } catch (error) {\n      console.error('Error seeding data:', error);\n      return false;\n    }\n  });\n  return function seedData() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default seedData;","map":{"version":3,"names":["seedData","_ref","_asyncToGenerator","carsCollection","collection","db","carsQuerySnapshot","getDocs","deletePromises","docs","map","doc","deleteDoc","ref","Promise","all","metadataRef","error","console","vehiclesCollection","vehicle","vehiclesData","addDoc","setDoc","seeded","log","apply","arguments"],"sources":["C:/Users/3com/Downloads/react-native-rent-a-car-main/react-native-rent-a-car-main/src/seeddata.js"],"sourcesContent":["const seedData = async () => {\r\n  try {\r\n    // Delete the 'cars' collection\r\n    const carsCollection = collection(db, 'cars');\r\n    const carsQuerySnapshot = await getDocs(carsCollection);\r\n    const deletePromises = carsQuerySnapshot.docs.map((doc) => deleteDoc(doc.ref));\r\n    await Promise.all(deletePromises);\r\n\r\n    // Delete the 'seedStatus' document\r\n    const metadataRef = doc(db, 'metadata', 'seedStatus');\r\n    await deleteDoc(metadataRef);\r\n  } catch (error) {\r\n    console.error('Error deleting data:', error);\r\n    return false;\r\n  }\r\n\r\n  // Now, proceed with seeding new data\r\n  const vehiclesCollection = collection(db, 'cars');\r\n\r\n\r\n  try {\r\n    for (const vehicle of vehiclesData) {\r\n      await addDoc(vehiclesCollection, vehicle);\r\n    }\r\n\r\n    // Update the 'seedStatus' document to indicate that data has been seeded\r\n    const metadataRef = doc(db, 'metadata', 'seedStatus');\r\n    await setDoc(metadataRef, { seeded: true });\r\n\r\n    console.log('Car data seeded successfully.');\r\n\r\n    // Return true to indicate that data was seeded\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error seeding data:', error);\r\n    // Handle error gracefully (e.g., log the error)\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default seedData;\r\n\r\n\r\n "],"mappings":";AAAA,IAAMA,QAAQ;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC3B,IAAI;MAEF,IAAMC,cAAc,GAAGC,UAAU,CAACC,EAAE,EAAE,MAAM,CAAC;MAC7C,IAAMC,iBAAiB,SAASC,OAAO,CAACJ,cAAc,CAAC;MACvD,IAAMK,cAAc,GAAGF,iBAAiB,CAACG,IAAI,CAACC,GAAG,CAAC,UAACC,GAAG;QAAA,OAAKC,SAAS,CAACD,GAAG,CAACE,GAAG,CAAC;MAAA,EAAC;MAC9E,MAAMC,OAAO,CAACC,GAAG,CAACP,cAAc,CAAC;MAGjC,IAAMQ,WAAW,GAAGL,GAAG,CAACN,EAAE,EAAE,UAAU,EAAE,YAAY,CAAC;MACrD,MAAMO,SAAS,CAACI,WAAW,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,KAAK;IACd;IAGA,IAAME,kBAAkB,GAAGf,UAAU,CAACC,EAAE,EAAE,MAAM,CAAC;IAGjD,IAAI;MACF,KAAK,IAAMe,OAAO,IAAIC,YAAY,EAAE;QAClC,MAAMC,MAAM,CAACH,kBAAkB,EAAEC,OAAO,CAAC;MAC3C;MAGA,IAAMJ,YAAW,GAAGL,GAAG,CAACN,EAAE,EAAE,UAAU,EAAE,YAAY,CAAC;MACrD,MAAMkB,MAAM,CAACP,YAAW,EAAE;QAAEQ,MAAM,EAAE;MAAK,CAAC,CAAC;MAE3CN,OAAO,CAACO,GAAG,CAAC,+BAA+B,CAAC;MAG5C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAE3C,OAAO,KAAK;IACd;EACF,CAAC;EAAA,gBAtCKjB,QAAQA,CAAA;IAAA,OAAAC,IAAA,CAAAyB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAsCb;AAED,eAAe3B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}