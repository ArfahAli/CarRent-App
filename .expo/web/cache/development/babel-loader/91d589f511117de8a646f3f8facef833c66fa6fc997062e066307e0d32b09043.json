{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { collection, addDoc, getDocs, doc, setDoc } from 'firebase/firestore';\nimport { db } from \"./firebase\";\nvar checkDataSeeded = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var metadataRef = doc(db, 'metadata', 'seedStatus');\n    var metadataSnapshot = yield getDocs(metadataRef);\n    return metadataSnapshot.exists();\n  });\n  return function checkDataSeeded() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar seedData = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var isDataSeeded = yield checkDataSeeded();\n    if (!isDataSeeded) {\n      var vehiclesCollection = collection(db, 'vehicles');\n      var vehiclesData = [];\n      for (var vehicle of vehiclesData) {\n        yield addDoc(vehiclesCollection, vehicle);\n      }\n      var metadataRef = doc(db, 'metadata', 'seedStatus');\n      yield setDoc(metadataRef, {\n        seeded: true\n      });\n      console.log('Data seeded successfully.');\n      return true;\n    } else {\n      console.log('Data is already seeded.');\n      return false;\n    }\n  });\n  return function seedData() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default seedData;","map":{"version":3,"names":["collection","addDoc","getDocs","doc","setDoc","db","checkDataSeeded","_ref","_asyncToGenerator","metadataRef","metadataSnapshot","exists","apply","arguments","seedData","_ref2","isDataSeeded","vehiclesCollection","vehiclesData","vehicle","seeded","console","log"],"sources":["C:/Users/3com/Downloads/react-native-rent-a-car-main/react-native-rent-a-car-main/src/seeddata.js"],"sourcesContent":["// seedData.js\r\nimport { collection, addDoc, getDocs, doc, setDoc } from 'firebase/firestore';\r\nimport { db } from './firebase';\r\n\r\nconst checkDataSeeded = async () => {\r\n  // Check if the 'seedStatus' document exists in the 'metadata' collection\r\n  const metadataRef = doc(db, 'metadata', 'seedStatus');\r\n  const metadataSnapshot = await getDocs(metadataRef);\r\n\r\n  return metadataSnapshot.exists();\r\n};\r\n\r\nconst seedData = async () => {\r\n  // Check if data is already seeded\r\n  const isDataSeeded = await checkDataSeeded();\r\n\r\n  if (!isDataSeeded) {\r\n    // Data is not seeded, proceed with seeding\r\n    const vehiclesCollection = collection(db, 'vehicles');\r\n    const vehiclesData = [\r\n      // ... (your vehicle data)\r\n    ];\r\n    for (const vehicle of vehiclesData) {\r\n      await addDoc(vehiclesCollection, vehicle);\r\n    }\r\n\r\n    // Update the 'seedStatus' document to indicate that data has been seeded\r\n    const metadataRef = doc(db, 'metadata', 'seedStatus');\r\n    await setDoc(metadataRef, { seeded: true });\r\n\r\n    console.log('Data seeded successfully.');\r\n\r\n    // Return true to indicate that data was seeded\r\n    return true;\r\n  } else {\r\n    console.log('Data is already seeded.');\r\n\r\n    // Return false to indicate that data was not seeded (already seeded)\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default seedData;\r\n\r\n\r\n\r\n "],"mappings":";AACA,SAASA,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAC7E,SAASC,EAAE;AAEX,IAAMC,eAAe;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAElC,IAAMC,WAAW,GAAGN,GAAG,CAACE,EAAE,EAAE,UAAU,EAAE,YAAY,CAAC;IACrD,IAAMK,gBAAgB,SAASR,OAAO,CAACO,WAAW,CAAC;IAEnD,OAAOC,gBAAgB,CAACC,MAAM,CAAC,CAAC;EAClC,CAAC;EAAA,gBANKL,eAAeA,CAAA;IAAA,OAAAC,IAAA,CAAAK,KAAA,OAAAC,SAAA;EAAA;AAAA,GAMpB;AAED,IAAMC,QAAQ;EAAA,IAAAC,KAAA,GAAAP,iBAAA,CAAG,aAAY;IAE3B,IAAMQ,YAAY,SAASV,eAAe,CAAC,CAAC;IAE5C,IAAI,CAACU,YAAY,EAAE;MAEjB,IAAMC,kBAAkB,GAAGjB,UAAU,CAACK,EAAE,EAAE,UAAU,CAAC;MACrD,IAAMa,YAAY,GAAG,EAEpB;MACD,KAAK,IAAMC,OAAO,IAAID,YAAY,EAAE;QAClC,MAAMjB,MAAM,CAACgB,kBAAkB,EAAEE,OAAO,CAAC;MAC3C;MAGA,IAAMV,WAAW,GAAGN,GAAG,CAACE,EAAE,EAAE,UAAU,EAAE,YAAY,CAAC;MACrD,MAAMD,MAAM,CAACK,WAAW,EAAE;QAAEW,MAAM,EAAE;MAAK,CAAC,CAAC;MAE3CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAGxC,OAAO,IAAI;IACb,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MAGtC,OAAO,KAAK;IACd;EACF,CAAC;EAAA,gBA5BKR,QAAQA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GA4Bb;AAED,eAAeC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}